
**************************************
播放
水印
音乐
转场
滤镜
保存
旋转问题
**************************************


**************************************
播放
**************************************
《使用ffmpeg合并视频文件的三种方法 》：http://blog.csdn.net/u012587637/article/details/51670975


**************************************
水印
**************************************
秀秀中预览视频时不需显示水印，需要能在最后保存时加入水印
问题：水印错误:
 E/IJKMEDIA: Failed to avformat_open_input '/storage/emulated/0/VideoEditorDir/test.jpg',ret=-1094995529
 E/IJKMEDIA: Error initializing filter 'movie'
 E/IJKMEDIA: *********************************Error initializing filter 'movie'
 E/IJKMEDIA:  with args '/storage/emulated/0/VideoEditorDir/test.jpg'
原因:https://stackoverflow.com/questions/10455611/how-to-solve-ffmpeg-watermark-no-such-filter-movie-and-failed-to-avformat
解决：ijk未开启对应的demuxers
问题：水印能否在ijk的硬解时添加失败，
     ret = av_buffersrc_add_frame(filt_in, frame);     返回 -22
     错误码 libavutil/error.c中   -22代表：无效参数
     av_buffersrc_add_frame  索引到：  av_frame_ref   ---》  av_frame_copy(dst, src)   ---》   frame_copy_video 方法中的：
         planes = av_pix_fmt_count_planes(dst->format);
            for (i = 0; i < planes; i++){
            if (!dst->data[i] || !src->data[i]){
                return AVERROR(EINVAL);
            }
         }
     原因： src->data[0] = 0
     软解帧此值不为0,硬解帧此值为0
     硬解帧异常，虽然可以加入帧缓冲队列显示，但是其format和data值都异常
     通过调用av_pix_fmt_count_planes方法得知 format=10001为无效format
     解决方案：首先搞懂软解和硬解出来的帧即avframe的区别
     软解: format=0对应于AV_PIX_FMT_YUV420P
     硬解: format=10001无对应格式(format一共347个)
解决：改用ffmpeg3.1后自带的mediacodec硬解后，由于其走的软解流程，添加成功
     问题：-enable-jni 报错
     -enable-jni 报错： ERROR: jni not found  Objective-C compiler not installed on this system
     高版本ffmpeg也会报错 ERROR: jni not found 但具体原因不一样
     解决：--target-os=linux ---》 --target-os=android
     成功实现硬解水印：https://www.cnblogs.com/elesos/p/6860865.html
加水印暂停后崩溃问题：暂时屏蔽destory方法

**************************************
音乐
**************************************
《SDL 与 FFMPEG 音乐播放器开发（2）——混播多个音频》：http://blog.csdn.net/u013080313/article/details/50387244
《ffmpeg实战教程（十二）为视频添加/更换背景音乐 》：http://blog.csdn.net/king1425/article/details/72628607
工作：1.播放  2.保存写入
无声问题：音频未开始解码
原因：configure_audio_filters 出错
暂时 #define CONFIG_AVFILTER 0 屏蔽configure_audio_filters操作
解决：--enable-filter=aresample
1.播放
>音频滤镜实现
>播放实现
  如何在原播放器基础上多重叠播放一个音频

**************************************
转场
**************************************

**************************************
滤镜
**************************************

**************************************
保存
**************************************
Add Android encoders support to MediaCodec implementation：https://trac.ffmpeg.org/ticket/6407
关于metadata信息：（播放时需要什么就获取什么，设置什么）
1.获取视频的metadata并记录
2.保存时将metadata信息设置生效
自己编码保存的视频，手机系统播放器无法播放，ijkplayer却可以播放
考虑应该是手机系统播放器依赖metadata信息，ijk不依赖，而我没设置全metadata信息
问题：系统播放器无法播放，ijk可以播放，不知需要设置哪些metadata信息
解决：视频编码器设置 enc_ctx->flags = AV_CODEC_FLAG_GLOBAL_HEADER （不是metadata的问题！！！！！）
concat问题:
问题:ijk播放正常，但是系统播放器会跳过第一段视频,duration有问题
解决：ffconcat文件写入的duration错误， ms没有转换为s
硬保：
mtmvcore 硬保需4.3及以上，4.1 引入 MediaExtractor， 4.3 引入 MediaMuxer类
可以完全使用android api,但视频格式兼容性不足，NO
问题：
保存时若单用硬解，会在muxing时即 av_interleaved_write_frame 返回-22（无效参数）
分析：有些帧有问题？
暂时解决：忽略av_interleaved_write_frame返回值，输出文件大小由软解的 0.91M---->796kb

谈谈关于Android视频编码的那些坑:https://ragnraok.github.io/android_video_record.html

ffmpeg 编码后得到的是 AVPacket , 然后写入 AVFormatContext 进行 mux
http://blog.csdn.net/leixiaohua1020/article/details/14215755
mediacodec 编码后得到的是 ByteBuffer ,可通过 MediaMuxer 进行 mux
https://bigflake.com/mediacodec/CameraToMpegTest.java.txt

ffmpeg 若要集成硬编，使用 mediacodec 将 frame 编码为 ByteBuffer 后，转为 AVPacket 然后去 mux 。

AVFrame  -->  YUV  -->  ByteBuffer  -->  硬码  -->  ByteBuffer  -->  AVPacket

opengl：


**************************************
旋转问题
**************************************
安卓手机录制的视频，往往会带rotation信息，且宽高会随旋转角度变化
比如720x1280的小米手机录制的视频实际宽高是1280x720(通过解码器获取), rotation=90度
手机系统播放器和ijk能按720x1280的宽高去播放视频，这是因为根据rotation对frame进行了旋转
ijk可以看到刚开始播放的一瞬间是1280x720的比例，这是因为ijk第一次是通过解码器获取的宽高，之后才由旋转后的frame宽高生效
问题：怎么解决ijk刚开始播放的一瞬间是1280x720的比例?
解决：不能直接把解码器获取的宽高穿给上层，要结合rotation信息

问题：怎么保存正常的宽高和rotation，使其可以正常播放?
1.像原视频一样宽高相反且保留rotation信息（无需旋转帧）
2.宽高正常且rotation置0（需要旋转帧）

底层同学的建议：view层级旋转比较好，解码后旋转有坑
但ffplay就是解码后旋转的，解码后通过avfilter对frame进行了旋转

关于显示：
对于宽>高的视频必须做旋转，会影响到水印图片的方向

关于保存：
问题：怎么保存正常的宽高和rotation，使其可以正常播放?
1.像原视频一样宽高相反且保留rotation信息（无需旋转帧），av_dict_set(&m_pDstVideoStream->metadata,"rotate","90",0);
2.宽高正常且rotation置0（需要旋转帧，将ffplay的旋转逻辑搬到保存流程）
